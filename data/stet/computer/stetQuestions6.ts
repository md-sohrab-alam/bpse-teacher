// stetQuestions6: Questions 51–60
export const stetQuestions6 = [
  {
    textEn: "Which testing approach involves testing individual components or units of code?",
    textHi: "कौन-सा परीक्षण दृष्टिकोण कोड के व्यक्तिगत घटकों/यूनिट का परीक्षण करता है?",
    optionAEn: "Integration Testing",
    optionAHi: "इंटीग्रेशन टेस्टिंग",
    optionBEn: "System Testing",
    optionBHi: "सिस्टम टेस्टिंग",
    optionCEn: "Unit Testing",
    optionCHi: "यूनिट टेस्टिंग",
    optionDEn: "Acceptance Testing",
    optionDHi: "स्वीकृति परीक्षण",
    correct: "C",
    explanationEn: "Unit tests validate isolated modules/functions.",
    explanationHi: "यूनिट टेस्ट अलग-थलग मॉड्यूल/फंक्शन की जाँच करते हैं।"
  },
  {
    textEn: "What is the main goal of System Testing?",
    textHi: "सिस्टम टेस्टिंग का मुख्य उद्देश्य क्या है?",
    optionAEn: "Testing components in isolation",
    optionAHi: "घटकों का अलग परीक्षण",
    optionBEn: "Testing integration of components",
    optionBHi: "घटकों के एकीकरण का परीक्षण",
    optionCEn: "Testing software functionality from the user's perspective",
    optionCHi: "उपयोगकर्ता के दृष्टिकोण से कार्यात्मकता का परीक्षण",
    optionDEn: "Identifying defects in source code",
    optionDHi: "स्रोत कोड में त्रुटियाँ ढूँढना",
    correct: "C",
    explanationEn: "System testing validates end-to-end behavior vs. requirements.",
    explanationHi: "सिस्टम टेस्टिंग एंड-टू-एंड व्यवहार को आवश्यकताओं के विरुद्ध जाँचती है।"
  },
  {
    textEn: "Which metric is used for estimating the size of a software project?",
    textHi: "सॉफ्टवेयर परियोजना के आकार का अनुमान लगाने हेतु कौन-सा मीट्रिक उपयोग होता है?",
    optionAEn: "Cyclomatic Complexity",
    optionAHi: "साइक्लोमैटिक जटिलता",
    optionBEn: "Function Points (FP)",
    optionBHi: "फंक्शन पॉइंट्स (FP)",
    optionCEn: "Defect Density",
    optionCHi: "दोष घनत्व",
    optionDEn: "Software Reliability Index",
    optionDHi: "सॉफ्टवेयर विश्वसनीयता सूचकांक",
    correct: "B",
    explanationEn: "Function points estimate functionality delivered to users.",
    explanationHi: "फंक्शन पॉइंट्स उपयोगकर्ता को प्रदान कार्यात्मकता का अनुमान देते हैं।"
  },
  {
    textEn: "What is the purpose of staffing level estimation in software project management?",
    textHi: "सॉफ्टवेयर परियोजना प्रबंधन में स्टाफिंग स्तर अनुमान का उद्देश्य क्या है?",
    optionAEn: "To determine the number of hardware components required",
    optionAHi: "आवश्यक हार्डवेयर घटकों की संख्या तय करना",
    optionBEn: "To identify potential risks in the project",
    optionBHi: "परियोजना के संभावित जोखिम पहचानना",
    optionCEn: "To allocate appropriate resources to the project",
    optionCHi: "परियोजना को उपयुक्त संसाधन आवंटित करना",
    optionDEn: "To estimate maintenance costs",
    optionDHi: "रखरखाव लागत का अनुमान लगाना",
    correct: "B",
    explanationEn: "As per the provided paper’s key, staffing estimation focuses on risk identification.",
    explanationHi: "प्रश्नपत्र के दिए गए उत्तरानुसार, स्टाफिंग अनुमान का फोकस जोखिम पहचान है।"
  },
  {
    textEn: "Which keyword is used to create an instance of a class?",
    textHi: "किस कीवर्ड से किसी क्लास का ऑब्जेक्ट बनाया जाता है?",
    optionAEn: "alloc",
    optionAHi: "alloc",
    optionBEn: "new",
    optionBHi: "new",
    optionCEn: "create",
    optionCHi: "create",
    optionDEn: "instance",
    optionDHi: "instance",
    correct: "B",
    explanationEn: "Most OOP languages (e.g., Java, C#) use `new`.",
    explanationHi: "अधिकतर OOP भाषाएँ (जैसे Java, C#) `new` का उपयोग करती हैं।"
  },
  {
    textEn: "What is an abstract class in OOP?",
    textHi: "OOP में एब्स्ट्रैक्ट क्लास क्या है?",
    optionAEn: "A class with no methods",
    optionAHi: "जिसमें कोई मेथड न हो",
    optionBEn: "A class that cannot be instantiated",
    optionBHi: "जिसका ऑब्जेक्ट नहीं बनाया जा सकता",
    optionCEn: "A class that can only have private members",
    optionCHi: "जिसमें केवल निजी सदस्य हो सकते हैं",
    optionDEn: "A class that cannot have methods with parameters",
    optionDHi: "जिसमें पैरामीटरयुक्त मेथड नहीं हो सकते",
    correct: "B",
    explanationEn: "Abstract classes define common structure and may contain abstract methods.",
    explanationHi: "एब्स्ट्रैक्ट क्लास सामान्य संरचना देती और एब्स्ट्रैक्ट मेथड रख सकती है।"
  },
  {
    textEn: "What is the purpose of the 'super' keyword?",
    textHi: "'super' कीवर्ड का उद्देश्य क्या है?",
    optionAEn: "It refers to the superclass in inheritance",
    optionAHi: "इनहेरिटेंस में सुपरक्लास को संदर्भित करता है",
    optionBEn: "It creates a new object instance",
    optionBHi: "यह नया ऑब्जेक्ट बनाता है",
    optionCEn: "It defines a new class",
    optionCHi: "यह नई क्लास परिभाषित करता है",
    optionDEn: "It handles exceptions",
    optionDHi: "यह अपवादों को संभालता है",
    correct: "A",
    explanationEn: "Used to access superclass members/constructors.",
    explanationHi: "सुपरक्लास के सदस्यों/कंस्ट्रक्टर तक पहुँच हेतु प्रयुक्त।"
  },
  {
    textEn: "Which of the following best defines a class?",
    textHi: "निम्न में से कौन-सा क्लास को सर्वोत्तम परिभाषित करता है?",
    optionAEn: "An instance of an object",
    optionAHi: "ऑब्जेक्ट का इंस्टेंस",
    optionBEn: "A blueprint for creating objects",
    optionBHi: "ऑब्जेक्ट बनाने का ब्लूप्रिंट",
    optionCEn: "A variable holding data",
    optionCHi: "डेटा रखने वाला वेरिएबल",
    optionDEn: "A function with a return value",
    optionDHi: "रिटर्न मान वाला फंक्शन",
    correct: "B",
    explanationEn: "Classes describe object structure/behavior.",
    explanationHi: "क्लास ऑब्जेक्ट की संरचना/व्यवहार बताती है।"
  },
  {
    textEn: "Which principle ensures that only essential information is visible to the outside world?",
    textHi: "कौन-सा सिद्धांत बाहरी दुनिया को केवल आवश्यक जानकारी दिखाता है?",
    optionAEn: "Polymorphism",
    optionAHi: "पॉलीमॉर्फिज़्म",
    optionBEn: "Information hiding",
    optionBHi: "इन्फॉर्मेशन हाइडिंग",
    optionCEn: "Encapsulation",
    optionCHi: "एन्कैप्सुलेशन",
    optionDEn: "Abstraction",
    optionDHi: "एब्स्ट्रैक्शन",
    correct: "B",
    explanationEn: "Information hiding limits external visibility of internals.",
    explanationHi: "इन्फॉर्मेशन हाइडिंग आंतरिक विवरण को बाहरी दृश्यता से सीमित करता है।"
  },
  {
    textEn: "What is the main purpose of inheritance in OOP?",
    textHi: "OOP में इनहेरिटेंस का मुख्य उद्देश्य क्या है?",
    optionAEn: "To create instances of classes",
    optionAHi: "क्लास के इंस्टेंस बनाना",
    optionBEn: "To prevent data abstraction",
    optionBHi: "डेटा एब्स्ट्रैक्शन को रोकना",
    optionCEn: "To establish a parent–child relationship between classes",
    optionCHi: "क्लासों के बीच पैरेंट–चाइल्ड संबंध स्थापित करना",
    optionDEn: "To define exceptions",
    optionDHi: "अपवाद परिभाषित करना",
    correct: "C",
    explanationEn: "Inheritance allows reuse/extension of behavior.",
    explanationHi: "इनहेरिटेंस व्यवहार के पुन: उपयोग/विस्तार की अनुमति देता है।"
  }
];
